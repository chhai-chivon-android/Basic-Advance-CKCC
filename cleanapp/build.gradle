// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
  repositories {
    jcenter()
  }
  dependencies {
    classpath 'com.android.tools.build:gradle:2.3.3'

    // NOTE: Do not place your application dependencies here; they belong
    // in the individual module build.gradle files
  }
}


ext {
  appCompatVersion = "25.1.0"
  buildToolsVersion = "25.0.3"
  targetSdk = 25
  compileSdk = 25
  minSdk = 19
}

task clean(type: Delete) {
  delete rootProject.buildDir
}

allprojects {
  repositories {
    jcenter()
    //mavenCentral()
    //maven { url 'https://maven.fabric.io/public' }
    //maven { url 'http://guardian.github.com/maven/repo-releases' }
  }

  //let project evaluate its script first
  project.afterEvaluate {
    //only apply to projects that have the android plugin
    if (project.plugins.hasPlugin('com.android.application')) {
      //global android setting
      project.android {
        packagingOptions {
          exclude 'META-INF/beans.xml'
          exclude 'META-INF/DEPENDENCIES'
          exclude 'META-INF/LICENSE'
          exclude 'META-INF/NOTICE'
          exclude 'META-INF/LICENSE.txt'
          exclude 'META-INF/NOTICE.txt'
          exclude 'META-INF/DEPENDENCIES.txt'
        }

        applicationVariants.all { variant ->
          //rename output files
          renameOutputFiles(project, variant)
        }

        dexOptions {
          jumboMode = true
          javaMaxHeapSize "2048M"
        }
      }
    }
  }
}

def renameOutputFiles(Project project, variant) {
  variant.outputs.each { output ->
    def abi = output.getFilter(com.android.build.OutputFile.ABI);
    output.versionCodeOverride = project.ext.versionCodes.get(abi, 0) * 10000000 + output.versionCode

    def alignedOutputFile = output.outputFile
    def unalignedOutputFile = output.packageApplication.outputFile
    def outputFileName = alignedOutputFile.name

    // Customise APK filenames
    if (outputFileName.contains("debug")) {
      outputFileName = outputFileName.replace("debug", "development").replace(".apk", "-" + (System.getenv("BUILD_NUMBER") ?: "local") + ".apk")
    } else {
      outputFileName = outputFileName.replace(".apk", "-" + variant.versionName + ".apk")
    }

    if (variant.buildType.zipAlignEnabled) {
      // normal APK
      output.outputFile = new File(alignedOutputFile.parent, outputFileName)
    }
    // 'unaligned' APK
    output.packageApplication.outputFile = new File(unalignedOutputFile.parent, outputFileName.replace(".apk", "-unaligned.apk"))
  }
}

